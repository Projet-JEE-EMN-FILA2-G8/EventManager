/*
 * Created on 26 oct. 2014 ( Time 19:52:14 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package eventmanager.business.persistence.services.fake;

import java.util.List;
import java.util.Map;

import eventmanager.business.bean.jpa.RegistrationEntity;
import eventmanager.business.persistence.commons.fake.GenericFakeService;
import eventmanager.business.persistence.services.RegistrationPersistence;

/**
 * Fake persistence service implementation ( entity "Registration" )
 *
 * @author Telosys Tools Generator
 */
public class RegistrationPersistenceFAKE extends GenericFakeService<RegistrationEntity> implements RegistrationPersistence {

	public RegistrationPersistenceFAKE () {
		super(RegistrationEntity.class);
	}
	
	protected RegistrationEntity buildEntity(int index) {
		RegistrationEntity entity = new RegistrationEntity();
		// Init fields with mock values
		entity.setIdevent( nextInteger() ) ;
		entity.setIdparticipant( nextInteger() ) ;
		return entity ;
	}
	
	
	public boolean delete(RegistrationEntity entity) {
		log("delete ( RegistrationEntity : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( Integer idevent, Integer idparticipant ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(RegistrationEntity entity) {
		log("insert ( RegistrationEntity : " + entity + ")" ) ;
	}

	public RegistrationEntity load( Integer idevent, Integer idparticipant ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<RegistrationEntity> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<RegistrationEntity> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<RegistrationEntity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public RegistrationEntity save(RegistrationEntity entity) {
		log("insert ( RegistrationEntity : " + entity + ")" ) ;
		return entity;
	}

	public List<RegistrationEntity> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
